<!DOCTYPE html>
<html>
  <head>
    <script>
      window.onerror = (e) => {
        _.setRoot('h1', 'a' + e + e.stack)
      }
    </script>
    <title>Censor Bot</title>
    <link rel="stylesheet" href="/static/css/base.css">
    <link rel="stylesheet" href="/static/css/admin.css">
    <script src="/static/js/capi.js"></script>
    <%- include('header') %>
  </head>
  <body>
    <div id="box">
      <%- include('base.ejs') %>
      <div style="text-align: center" id="root">
      </div>
      <script>
        const root = document.getElementById('root')
        api.register({
          login: async (user) => {
            let clusters
            if (user.admin) clusters = await api.request('GET', '/admin')

            if (!clusters || clusters.error) return _.setRoot('h1', 'Unauthorized')

            _.setRoot([
              _.elm('h1', {
                innerText: 'Updating in 5.0 seconds',
                id: 'timer'
              }),
              ...clusters.map(({cluster, shards}) => 
                _.elm('div', {
                  classes: ['cluster']
                }, [
                  _.elm('h1', `Cluster ${cluster.id}`),
                  ...shards.map(shard =>
                    _.elm('div', {
                      innerText: `Shard ${shard.id}`,
                      id: shard.id,
                      events: {
                        'click': (e) => {
                          api.request('DELETE', `/admin/shards/${shard.id}`)
                          e.setAttribute('state', '0')
                        }
                      }
                    }, {
                      state: shard.state
                    })
                  )
                ])
              )
            ])

            const timer = document.getElementById('timer')

            let lastUpdate = Date.now() - 5000
            const interval = setInterval(() => {
              timer.innerText = `Updating in ${((5000 - (Date.now() - lastUpdate)) / 1000).toFixed(1)} seconds`
              if (((Date.now() - lastUpdate) > 4000) && !document.hidden) {
                lastUpdate = Date.now()
                api.request('GET', '/admin')
                  .then(res => {
                    res.map(x => x.shards).flat().forEach((shard) => {
                      document.getElementById(shard.id).setAttribute('state', shard.state)
                    })
                  })
                  .catch(err => {
                    console.log(err)
                    clearInterval(interval)
                  })
              }
            }, 100)
          },
          logout: _.preset.login,
          logging: _.preset.loading
        })
      </script>
    </div>
  </body>
</html>